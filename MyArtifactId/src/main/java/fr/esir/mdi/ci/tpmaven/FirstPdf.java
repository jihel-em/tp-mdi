package fr.esir.mdi.ci.tpmaven;

import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

/**
 * Ceci est la classe FirstPdf.
 * @author Jean-Loup
 *
 */
public final class FirstPdf {
   /**
    * File.
    */
    private static String file = "FirstPdf.pdf";

    /**
     * Constant 18.
     */
    private static final int SIZE18 = 18;

    /**
     * Constant 12.
     */
    private static final int SIZE12 = 12;

    /**
     * Constant 16.
     */
    private static final int SIZE16 = 16;

    /**
     * Font catFont.
     */
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, SIZE18,
            Font.BOLD);

    /**
     * Font redFont.
     */
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, SIZE12,
            Font.NORMAL, BaseColor.RED);

    /**
     * Font subFont.
     */
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, SIZE16,
            Font.BOLD);

    /**
     * Font smallBold.
     */
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN,
          SIZE12,
            Font.BOLD);

    private FirstPdf() { }

    /**
     * Ceci est le main.
     * @param args
     */
    public static void main(final String[] args) {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(file));
            document.open();
            addMetaData(document);
            addTitlePage(document);
            addContent(document);
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * iText allows to add metadata to the PDF
     * which can be viewed in your Adobe.
     * Reader.
     * under File -> Properties.
     * @param document
     */
    static void addMetaData(final Document document) {
        document.addTitle("My first PDF");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Olivier Barais");
        document.addCreator("Olivier Barais");
    }

    /**
     * Method addTitlePage(Document d).
     * @param document
     * @throws DocumentException
     */
    static void addTitlePage(final Document document)
            throws DocumentException {
       final int number1 = 1;
       final int number3 = 3;
       final int number8 = 8;
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, number1);
        // Lets write a big header
        preface.add(new Paragraph("Title of the document", catFont));

        addEmptyLine(preface, number1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Report generated by: "
                + System.getProperty("user.name")
                + ", " + new Date(),
                smallBold));
        addEmptyLine(preface, number3);
        preface.add(new Paragraph(
                "This document describes something which is very important ",
                smallBold));

        addEmptyLine(preface, number8);

        preface.add(new Paragraph(
                "This document is a preliminary version and not subject"
              + " to your license agreement or any other agreement  ;-).",
                redFont));

        document.add(preface);
        // Start a new page
        document.newPage();
    }

    /**
     * Method void addContent(Document document).
     * @param document
     * @throws DocumentException
     */
    static void addContent(final Document document)
          throws DocumentException {
       final int number1 = 1;
       final int number5 = 5;

        Anchor anchor = new Anchor("First Chapter", catFont);
        anchor.setName("First Chapter");

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), number1);

        Paragraph subPara = new Paragraph("Subcategory 1", subFont);
        Section subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Hello"));

        subPara = new Paragraph("Subcategory 2", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Paragraph 1"));
        subCatPart.add(new Paragraph("Paragraph 2"));
        subCatPart.add(new Paragraph("Paragraph 3"));

        // add a list
        createList(subCatPart);
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, number5);
        subCatPart.add(paragraph);

        // add a table
        createTable(subCatPart);

        // now add all this to the document
        document.add(catPart);

        // Next section
        anchor = new Anchor("Second Chapter", catFont);
        anchor.setName("Second Chapter");

        // Second parameter is the number of the chapter
        catPart = new Chapter(new Paragraph(anchor), number1);

        subPara = new Paragraph("Subcategory", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("This is a very important message"));

        // now add all this to the document
        document.add(catPart);

    }

    /**
     * Method void createTable(Section subCatPart).
     * @param subCatPart
     * @throws BadElementException
     */
    private static void createTable(final Section subCatPart)
          throws BadElementException {
       final int numColumn3 = 3;
       final int headerRows1 = 1;
        PdfPTable table = new PdfPTable(numColumn3);

        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 2"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 3"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(headerRows1);

        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("2.1");
        table.addCell("2.2");
        table.addCell("2.3");

        subCatPart.add(table);

    }

    /**
     * Method void createList(Section subCatPart).
     * @param subCatPart
     */
    private static void createList(final Section subCatPart) {
       final int symbolIndent10 = 10;
        List list = new List(true, false, symbolIndent10);
        list.add(new ListItem("First point"));
        list.add(new ListItem("Second point"));
        list.add(new ListItem("Third point"));
        subCatPart.add(list);
    }

    /**
     * Method void addEmptyLine(Paragraph paragraph, int number).
     * @param paragraph
     * @param number
     */
    private static void addEmptyLine(final Paragraph paragraph,
          final int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
